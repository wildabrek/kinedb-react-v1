"use client"

import type React from "react"
import { useParams, useRouter } from "next/navigation"
import { useState, useEffect, useMemo, useCallback, useRef } from "react" // useRef eklendi
import {
  getStudent,
  getClass,
  getTeacher,
  getStudentGamePlays,
  getStudentSkills,
  getStudentSubjectScores,
  getGameById,
  getStudentActionPlans,
  getStudentStrengths,
  getStudentDevelopmentAreas,
  getStrengths,
  getDevelopmentAreas,
  getAllGames,
  type Game,
  type Student,
  type GamePlay,
  type StudentSkill,
  type StudentSubjectScore,
  type GameTypeAlias,
  type Strength,
  type DevelopmentArea,
} from "@/lib/api"
import { type StudentDataForReport, type AIReport, generateStudentReportJson } from "@/actions/gemini-actions"
import { useLanguage } from "@/contexts/language-context"
import { useToast } from "@/components/ui/use-toast"

// PDF dışa aktarma için gerekli kütüphaneler eklendi
import jsPDF from "jspdf"
import html2canvas from "html2canvas"

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import {
  BarChart,
  Bar,
  ResponsiveContainer,
  LineChart as RechartsLineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts"
import Link from "next/link"
import {
  ArrowLeft,
  ChevronUp,
  Download,
  Gamepad2Icon as GameController2,
  LineChartIcon,
  Mail,
  Printer,
  Share2,
  Star,
  Users,
  Loader2,
  CheckCircle,
  AlertCircle,
  MinusCircle,
  FileText,
  Award,
  BrainCircuit,
  Gamepad2,
  ListChecks,
  TrendingUp,
  BookOpen,
  Sparkles,
  Target,
} from "lucide-react"
import StudentSkillsRadar from "@/components/student-skills-radar"

const SectionCard: React.FC<{
  icon: React.ReactNode
  title: string
  description?: string
  children: React.ReactNode
  className?: string
}> = ({ icon, title, description, children, className }) => {
  const { translate: t } = useLanguage()
  return (
    <Card className={className}>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          {icon}
          {title}
        </CardTitle>
        {description && <CardDescription>{description}</CardDescription>}
      </CardHeader>
      <CardContent>{children}</CardContent>
    </Card>
  )
}

const AiReportSummary: React.FC<{ studentData: StudentDataForReport; language: string }> = ({
  studentData,
  language,
}) => {
  const { translate: t } = useLanguage()
  const [report, setReport] = useState<AIReport | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const fetchReport = useCallback(async () => {
    if (!studentData) return
    setLoading(true)
    setError(null)
    setReport(null)

    const result = await generateStudentReportJson(studentData, language)

    if (result.report) {
      setReport(result.report)
    } else {
      setError(result.error || t("An unknown error occurred while generating the report."))
    }
    setLoading(false)
  }, [studentData, language, t])

  useEffect(() => {
    fetchReport()
  }, [fetchReport])

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>{t("AI Report is being generated...")}</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center justify-center p-10">
          <Loader2 className="h-8 w-8 animate-spin text-primary" />
          <p className="ml-4 text-muted-foreground">{t("Please wait a moment.")}</p>
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card className="border-destructive">
        <CardHeader>
          <CardTitle className="text-destructive">{t("Failed to Generate AI Report")}</CardTitle>
        </CardHeader>
        <CardContent className="flex items-center p-6">
          <AlertCircle className="h-6 w-6 text-destructive mr-4" />
          <p className="text-sm text-destructive">{t(error)}</p>
        </CardContent>
      </Card>
    )
  }

  if (!report) {
    return null
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <BrainCircuit className="h-6 w-6 text-primary" />
            {t("AI-Powered Report Summary")}
          </CardTitle>
          <CardDescription>
            {t("This report was generated by AI based on the student's performance data.")}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Button onClick={fetchReport} disabled={loading}>
            {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
            {t("Regenerate Report")}
          </Button>
        </CardContent>
      </Card>

      <SectionCard
        icon={<FileText className="h-5 w-5" />}
        title={t(report.overallAssessment.title)}
        className="border-blue-200 dark:border-blue-800"
      >
        <p>{t(report.overallAssessment.content)}</p>
      </SectionCard>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <SectionCard
          icon={<Sparkles className="h-5 w-5" />}
          title={t(report.strengths.title)}
          description={t(report.strengths.content)}
          className="border-green-200 dark:border-green-800"
        >
          <ul className="space-y-2">
            {report.strengths.items.map((item, index) => (
              <li key={index} className="flex items-start gap-2">
                <CheckCircle className="mt-1 h-4 w-4 flex-shrink-0 text-green-500" />
                <span>{t(item)}</span>
              </li>
            ))}
          </ul>
        </SectionCard>

        <SectionCard
          icon={<TrendingUp className="h-5 w-5" />}
          title={t(report.developmentSuggestions.title)}
          description={t(report.developmentSuggestions.content)}
          className="border-orange-200 dark:border-orange-800"
        >
          <ul className="space-y-2">
            {report.developmentSuggestions.items.map((item, index) => (
              <li key={index} className="flex items-start gap-2">
                <Target className="mt-1 h-4 w-4 flex-shrink-0 text-orange-500" />
                <span>{t(item)}</span>
              </li>
            ))}
          </ul>
        </SectionCard>
      </div>

      {report.actionPlan && (
        <SectionCard
          icon={<ListChecks className="h-5 w-5" />}
          title={t(report.actionPlan.title)}
          className="border-gray-200 dark:border-gray-800"
        >
          <div className="space-y-4">
            <div>
              <h4 className="font-semibold text-sm text-gray-700">{t(report.actionPlan.short_term.title)}</h4>
              <ul className="list-disc pl-5 mt-1 space-y-1 text-sm text-muted-foreground">
                {report.actionPlan.short_term.items.map((item, index) => (
                  <li key={`st-${index}`}>{t(item)}</li>
                ))}
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-sm text-gray-700">{t(report.actionPlan.medium_term.title)}</h4>
              <ul className="list-disc pl-5 mt-1 space-y-1 text-sm text-muted-foreground">
                {report.actionPlan.medium_term.items.map((item, index) => (
                  <li key={`mt-${index}`}>{t(item)}</li>
                ))}
              </ul>
            </div>
            <div>
              <h4 className="font-semibold text-sm text-gray-700">{t(report.actionPlan.long_term.title)}</h4>
              <ul className="list-disc pl-5 mt-1 space-y-1 text-sm text-muted-foreground">
                {report.actionPlan.long_term.items.map((item, index) => (
                  <li key={`lt-${index}`}>{t(item)}</li>
                ))}
              </ul>
            </div>
          </div>
        </SectionCard>
      )}

      <SectionCard
        icon={<Gamepad2 className="h-5 w-5" />}
        title={t(report.recommendedGames.title)}
        description={t(report.recommendedGames.content)}
        className="border-purple-200 dark:border-purple-800"
      >
        <div className="grid gap-4 sm:grid-cols-2">
          {report.recommendedGames.games.map((game, index) => (
            <div key={index} className="rounded-lg border bg-card p-3 text-card-foreground shadow-sm">
              <h4 className="font-semibold">{t(game.name)}</h4>
              <p className="text-muted-foreground">{t(game.reason)}</p>
            </div>
          ))}
        </div>
      </SectionCard>

      {report.futureProjection && (
        <SectionCard
          icon={<TrendingUp className="h-5 w-5" />}
          title={t(report.futureProjection.title)}
          className="border-yellow-200 dark:border-yellow-800"
        >
          <p>{t(report.futureProjection.content)}</p>
        </SectionCard>
      )}

      {studentData.badges && studentData.badges.length > 0 && (
        <SectionCard
          icon={<Award className="h-5 w-5" />}
          title={t("Achievements & Badges")}
          className="border-yellow-200 dark:border-yellow-800"
        >
          <ul className="flex flex-wrap gap-2">
            {studentData.badges.map((badge, index) => (
              <li key={index} className="bg-muted/50 px-3 py-1 rounded-full text-sm">
                {t(badge)}
              </li>
            ))}
          </ul>
        </SectionCard>
      )}

      {studentData.subjectScores && studentData.subjectScores.length > 0 && (
        <SectionCard
          icon={<BookOpen className="h-5 w-5" />}
          title={t("Subject Performance")}
          className="border-blue-200 dark:border-blue-800"
        >
          <ul className="space-y-2">
            {studentData.subjectScores.map((subject, index) => (
              <li key={index} className="flex justify-between text-sm">
                <span>{t(subject.subject)}</span>
                <span className="font-bold">{subject.score}%</span>
              </li>
            ))}
          </ul>
        </SectionCard>
      )}

      <SectionCard
        icon={<Award className="h-5 w-5" />}
        title={t(report.conclusion.title)}
        className="border-indigo-200 dark:border-indigo-800"
      >
        <p>{t(report.conclusion.content)}</p>
      </SectionCard>
    </div>
  )
}

const classAverages: { [key: string]: number } = {
  Math: 82,
  English: 80,
  Science: 78,
  History: 75,
  "Critical Thinking": 75,
  "Problem Solving": 78,
  "Reading Comprehension": 76,
  "Mathematical Reasoning": 74,
  "Scientific Inquiry": 72,
  "Historical Analysis": 70,
}

export default function StudentProgressReport() {
  const { id } = useParams<{ id: string }>()
  const router = useRouter()
  const { toast } = useToast()
  const { translate: t, language } = useLanguage()
  const [activeTab, setActiveTab] = useState("overview")
  const [isExporting, setIsExporting] = useState(false)
  const [loading, setLoading] = useState(true)
  const [studentData, setStudentData] = useState<Student | null>(null)
  const [gameDetails, setGameDetails] = useState<Record<number, GameTypeAlias>>({})
  const [gamePlays, setGamePlays] = useState<GamePlay[]>([])
  const [skills, setSkills] = useState<StudentSkill[]>([])
  const [subjectScores, setSubjectScores] = useState<StudentSubjectScore[]>([])
  const [actionPlans, setActionPlans] = useState<{ type: string; goal: string; status?: string }[]>([])
  const [strengthNames, setStrengthNames] = useState<string[]>([])
  const [developmentAreaNames, setDevelopmentAreaNames] = useState<string[]>([])
  const [error, setError] = useState<string | null>(null)
  const [allGames, setAllGames] = useState<Game[]>([])
  const reportRef = useRef<HTMLDivElement>(null) // PDF'e dönüştürülecek alan için ref eklendi

  useEffect(() => {
    async function fetchAllData() {
      if (!id) return
      try {
        setLoading(true)
        setError(null)
        const studentId = Number(id)

        const [
          studentRes,
          gamePlaysRes,
          skillsRes,
          subjectScoresRes,
          actionPlansRes,
          studentStrengthsRes,
          studentDevAreasRes,
          allStrengthsRes,
          allDevAreasRes,
          allGamesRes,
        ] = await Promise.all([
          getStudent(id),
          getStudentGamePlays(studentId).catch(() => []),
          getStudentSkills(studentId).catch(() => []),
          getStudentSubjectScores(studentId).catch(() => []),
          getStudentActionPlans(studentId).catch(() => []),
          getStudentStrengths(studentId).catch(() => []),
          getStudentDevelopmentAreas(studentId).catch(() => []),
          getStrengths().catch(() => []),
          getDevelopmentAreas().catch(() => []),
          getAllGames().catch(() => []),
        ])

        if (!studentRes) {
          toast({ title: t("Error"), description: t("Student not found"), variant: "destructive" })
          router.push("/students")
          return
        }

        const student = studentRes

        student.name = `${student.name || ""} ${student.surname || ""}`.trim()

        let teacherName = t("Unknown")
        if (student.class_id) {
          try {
            const classData = await getClass(student.class_id.toString())
            if (classData?.teacher_id) {
              const teacherData = await getTeacher(classData.teacher_id)
              if (teacherData) {
                teacherName = `${teacherData.first_name} ${teacherData.last_name}`
              }
            }
          } catch (err) {
            console.error("Error fetching class/teacher data:", err)
          }
        }
        student.teacher = teacherName

        if (student.progress_status) {
          student.progress_status =
            student.progress_status.charAt(0).toUpperCase() + student.progress_status.slice(1).toLowerCase()
        } else {
          student.progress_status = "Unknown"
        }

        const allStrengthsMap = new Map(allStrengthsRes.map((s: Strength) => [s.id, s.name]))
        const allDevAreasMap = new Map(allDevAreasRes.map((a: DevelopmentArea) => [a.id, a.name]))
        const mappedStrengthNames = studentStrengthsRes.map(
          (s) => allStrengthsMap.get(s.strength_id) || `${t("Strength")} ${s.strength_id}`,
        )
        const mappedDevAreaNames = studentDevAreasRes.map(
          (a) => allDevAreasMap.get(a.name) || `${t("Development Area")} ${a.name}`,
        )
        setStrengthNames(mappedStrengthNames)
        setDevelopmentAreaNames(mappedDevAreaNames)

        if (gamePlaysRes.length > 0) {
          const uniqueGameIds = [...new Set(gamePlaysRes.map((p) => p.game_id))]
          const gameDetailsPromises = uniqueGameIds.map((gameId) =>
            getGameById(gameId).catch((err) => {
              console.error(`Failed to fetch game ${gameId}:`, err)
              return null
            }),
          )
          const games = await Promise.all(gameDetailsPromises)
          const gameDetailsMap: Record<number, GameTypeAlias> = {}
          games.forEach((game) => {
            if (game) gameDetailsMap[game.id] = game
          })
          setGameDetails(gameDetailsMap)
        }

        setStudentData(student)
        setGamePlays(gamePlaysRes)
        setSkills(skillsRes)
        setSubjectScores(subjectScoresRes)
        setActionPlans(actionPlansRes)
        setAllGames(allGamesRes)
      } catch (err) {
        console.error("Error fetching student data:", err)
        const errorMessage = t("Failed to load student data. Please try again.")
        setError(errorMessage)
        toast({ title: t("Error"), description: errorMessage, variant: "destructive" })
      } finally {
        setLoading(false)
      }
    }
    fetchAllData()
  }, [id, router, toast, t])

  const studentDataForReport = useMemo((): StudentDataForReport | null => {
    if (!studentData) return null
    return {
      name: studentData.name || `${studentData.first_name || ""} ${studentData.last_name || ""}`.trim(),
      grade: studentData.grade,
      avg_score: studentData.avg_score,
      games_played: studentData.games_played,
      strengths: strengthNames,
      developmentAreas: developmentAreaNames,
      badges: studentData.badges || [],
      subjectScores: subjectScores.map((s) => ({
        subject: s.subject,
        score: s.score,
      })),
      gameScores: gamePlays.map((play) => ({
        game: gameDetails[play.game_id]?.game_name || `Game ID ${play.game_id}`,
        score: play.score,
        skills: skills.filter((skill) => skill.game_id === play.game_id).map((skill) => skill.skill),
      })),
      skills: skills.map((s) => ({ skill: s.skill, score: s.score })),
      allGames: allGames.map((g) => ({
        id: g.id,
        game_name: g.game_name,
        description: g.description,
      })),
    }
  }, [studentData, strengthNames, developmentAreaNames, gamePlays, skills, gameDetails, allGames, subjectScores])

  const handlePrintReport = () => {
    toast({ title: t("Printing Report"), description: t("The progress report is being sent to the printer.") })
    window.print()
  }

  // PDF dışa aktarma fonksiyonu güncellendi
  const handleExportReport = async () => {
    if (!reportRef.current) {
      toast({
        title: t("Error"),
        description: t("Could not find the report content to export."),
        variant: "destructive",
      })
      return
    }

    setIsExporting(true)
    toast({ title: t("Exporting Report"), description: t("The progress report is being exported as PDF.") })

    try {
      const canvas = await html2canvas(reportRef.current, {
        scale: 2, // Daha yüksek çözünürlük için ölçeklendirme
        useCORS: true, // Varsa dış kaynaklı resimlerin yüklenmesini sağlar
      })

      const imgData = canvas.toDataURL("image/png")
      const pdf = new jsPDF({
        orientation: "p",
        unit: "mm",
        format: "a4",
      })

      const pdfWidth = pdf.internal.pageSize.getWidth()
      const pdfHeight = pdf.internal.pageSize.getHeight()
      const canvasWidth = canvas.width
      const canvasHeight = canvas.height
      const ratio = canvasWidth / canvasHeight
      const imgWidth = pdfWidth - 20 // 10mm kenar boşluğu
      const imgHeight = imgWidth / ratio

      let heightLeft = imgHeight
      let position = 10 // Üst kenar boşluğu

      pdf.addImage(imgData, "PNG", 10, position, imgWidth, imgHeight)
      heightLeft -= pdfHeight

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight + 10 // Sayfa sonundan pozisyon ayarı
        pdf.addPage()
        pdf.addImage(imgData, "PNG", 10, position, imgWidth, imgHeight)
        heightLeft -= pdfHeight
      }

      pdf.save(`student-report-${studentData?.name.replace(/ /g, "_") || id}.pdf`)

      toast({
        title: t("Export Complete"),
        description: t("The progress report has been exported successfully."),
      })
    } catch (error) {
      console.error("Error exporting PDF:", error)
      toast({
        title: t("Export Failed"),
        description: t("An error occurred while exporting the report to PDF."),
        variant: "destructive",
      })
    } finally {
      setIsExporting(false)
    }
  }

  const handleShareReport = () => {
    if (!id) return
    navigator.clipboard.writeText(`${window.location.origin}/students/${id}/progress-report`)
    toast({ title: t("Link Copied"), description: t("Progress report link copied to clipboard") })
  }
  const handleEmailReport = () => {
    if (!studentData?.email) {
      toast({ title: t("Cannot Send Email"), description: t("Student email address not found."), variant: "warning" })
      return
    }
    toast({ title: t("Email Sent"), description: t(`The progress report has been emailed to ${studentData.email}`) })
  }

  const getClassAverage = (key: string): number => classAverages[key] || 0

  const getSkillDisplayAndComment = (skillName: string, score: number) => {
    let level: string, commentKey: string, icon: React.ReactNode, displaySkillName: string
    const effectiveSkillName = skillName === "Focus" ? "Focus & Attention" : skillName
    const normalizedSkillNameForComment = effectiveSkillName.replace(/\s&\s/g, "").replace(/\s/g, "")
    displaySkillName = t(effectiveSkillName)

    if (score >= 90) {
      level = t("Excellent")
      commentKey = `skill_${normalizedSkillNameForComment}_Excellent`
      icon = <CheckCircle className="h-4 w-4 text-green-500" />
    } else if (score >= 80) {
      level = t("Good")
      commentKey = `skill_${normalizedSkillNameForComment}_Good`
      icon = <CheckCircle className="h-4 w-4 text-blue-500" />
    } else if (score >= 70) {
      level = t("Satisfactory")
      commentKey = `skill_${normalizedSkillNameForComment}_Satisfactory`
      icon = <AlertCircle className="h-4 w-4 text-yellow-500" />
    } else {
      level = t("Needs Improvement")
      commentKey = `skill_${normalizedSkillNameForComment}_NeedsImprovement`
      icon = <MinusCircle className="h-4 w-4 text-red-500" />
    }
    const comment =
      t(commentKey, { skillName: displaySkillName }) ||
      t(`skillComment${level.replace(/\s/g, "")}`, { skillName: displaySkillName })
    return { level, comment, icon, displaySkillName }
  }

  const sortedSkills = [...skills].sort((a, b) => b.score - a.score)
  const topStrengths = sortedSkills.slice(0, 3)
  const areasForDevelopment = sortedSkills.slice(-3).reverse()

  if (loading) {
    return (
      <div className="container mx-auto p-4 space-y-6 text-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary mx-auto" />
        <p className="text-sm text-muted-foreground">{t("Loading student data...")}</p>
      </div>
    )
  }

  if (error) {
    return (
      <div className="container mx-auto p-4 space-y-6 text-center">
        <h2 className="text-xl font-bold">{t("Error")}</h2>
        <p className="mt-2">{error}</p>
        <Button className="mt-4" onClick={() => router.push("/students")}>
          {t("Back to Students")}
        </Button>
      </div>
    )
  }

  if (!studentData) {
    return (
      <div className="container mx-auto p-4 space-y-6 text-center">
        <h2 className="text-xl font-bold">{t("Student Not Found")}</h2>
        <p className="mt-2">{t("The requested student could not be found.")}</p>
        <Button className="mt-4" onClick={() => router.push("/students")}>
          {t("Back to Students")}
        </Button>
      </div>
    )
  }

  const studentFullName = studentData.name || `${studentData.first_name || ""} ${studentData.last_name || ""}`.trim()

  return (
    // Dışa aktarılacak ana kapsayıcıya ref eklendi
    <div ref={reportRef} className="container mx-auto p-4 space-y-6">
      {/* Header */}
      <div className="flex flex-wrap items-center gap-2">
        <Button variant="outline" size="icon" asChild className="h-9 w-9 bg-transparent">
          <Link href={`/students/${id}/profile`}>
            <ArrowLeft className="h-4 w-4" />
            <span className="sr-only">{t("Back to student profile")}</span>
          </Link>
        </Button>
        <div>
          <h1 className="text-2xl font-bold">{t("Student Progress Report")}</h1>
          <p className="text-sm text-muted-foreground">{t("Comprehensive assessment and improvement plan")}</p>
        </div>
        <div className="ml-auto flex flex-wrap gap-2">
          <Button variant="outline" size="sm" onClick={handleShareReport}>
            <Share2 className="mr-2 h-4 w-4" />
            {t("Share")}
          </Button>
          <Button variant="outline" size="sm" onClick={handlePrintReport}>
            <Printer className="mr-2 h-4 w-4" />
            {t("Print")}
          </Button>
          <Button variant="outline" size="sm" onClick={handleEmailReport}>
            <Mail className="mr-2 h-4 w-4" />
            {t("Email")}
          </Button>
          <Button size="sm" onClick={handleExportReport} disabled={isExporting}>
            {isExporting ? (
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            ) : (
              <Download className="mr-2 h-4 w-4" />
            )}
            {isExporting ? t("Exporting...") : t("Export PDF")}
          </Button>
        </div>
      </div>

      {/* Student info card */}
      <Card>
        <CardContent className="p-6">
          <div className="flex flex-col md:flex-row gap-6 items-center md:items-start">
            <div className="flex flex-col items-center text-center md:w-48 flex-shrink-0">
              <Avatar className="h-24 w-24 mb-4">
                <AvatarImage src={studentData.avatar || "/placeholder.svg"} alt={studentFullName} />
                <AvatarFallback>{studentFullName.charAt(0)?.toUpperCase()}</AvatarFallback>
              </Avatar>
              <h2 className="text-xl font-bold">{studentFullName}</h2>
              <div className="flex items-center gap-2 mt-1">
                <Badge variant="outline" className="flex items-center gap-1">
                  <Users className="h-3 w-3" />
                  {t("Class")} {studentData.class_id}
                </Badge>
                <Badge>{studentData.grade}</Badge>
              </div>
            </div>
            <div className="flex-1 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">{t("Teacher")}</h3>
                <p>{studentData.teacher || t("Unknown")}</p>
              </div>
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">{t("Last Active")}</h3>
                <p>{studentData.last_active || t("Unknown")}</p>
              </div>
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">{t("Progress Status")}</h3>
                <Badge
                  variant={
                    studentData.progress_status?.toLowerCase() === "advanced" ||
                    studentData.progress_status?.toLowerCase() === "excellent"
                      ? "default"
                      : studentData.progress_status?.toLowerCase() === "on track"
                        ? "outline"
                        : "destructive"
                  }
                  className={`text-base font-bold px-3 py-1 ${studentData.progress_status?.toLowerCase() === "advanced" || studentData.progress_status?.toLowerCase() === "excellent" ? "bg-green-100 text-green-800 border-green-200" : studentData.progress_status?.toLowerCase() === "on track" ? "bg-blue-100 text-blue-800 border-blue-200" : "bg-red-100 text-red-800 border-red-200"}`}
                >
                  {t(studentData.progress_status || "Unknown")}
                </Badge>
              </div>
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">{t("Average Score")}</h3>
                <p className="text-2xl font-bold">{studentData.avg_score || 0}%</p>
              </div>
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">{t("Games Played")}</h3>
                <p className="text-2xl font-bold">{studentData.games_played || 0}</p>
              </div>
              <div className="space-y-1">
                <h3 className="text-sm font-medium text-muted-foreground">{t("Report Generated")}</h3>
                <p>{new Date().toLocaleDateString()}</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Main content tabs */}
      <Tabs defaultValue="overview" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-2 md:grid-cols-5">
          <TabsTrigger value="overview">{t("Overview")}</TabsTrigger>
          <TabsTrigger value="subjects">{t("Subjects")}</TabsTrigger>
          <TabsTrigger value="skills">{t("Skills")}</TabsTrigger>
          <TabsTrigger value="games">{t("Games")}</TabsTrigger>
          <TabsTrigger value="recommendations">{t("Recommendations")}</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6 mt-4">
          <Card>
            <CardHeader>
              <CardTitle>{t("Performance Summary")}</CardTitle>
              <CardDescription>{t("Overall academic performance and progress")}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card>
                  <CardContent className="pt-6">
                    <div className="flex flex-col items-center text-center">
                      <div className="relative w-24 h-24 flex items-center justify-center">
                        <svg className="w-24 h-24" viewBox="0 0 100 100">
                          <circle
                            className="text-gray-200 stroke-current"
                            strokeWidth="8"
                            stroke="currentColor"
                            fill="transparent"
                            r="42"
                            cx="50"
                            cy="50"
                          />
                          <circle
                            className="text-primary stroke-current"
                            strokeWidth="8"
                            strokeLinecap="round"
                            stroke="currentColor"
                            fill="transparent"
                            r="42"
                            cx="50"
                            cy="50"
                            strokeDasharray={`${((studentData.avg_score || 0) / 100) * 2 * Math.PI * 42} ${
                              2 * Math.PI * 42
                            }`}
                            transform="rotate(-90 50 50)"
                          />
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                          <div className="text-2xl font-bold">{studentData.avg_score || 0}%</div>
                        </div>
                      </div>
                      <h3 className="mt-4 text-lg font-medium">{t("Average Score")}</h3>
                      <p className="text-sm text-muted-foreground">{t("Across all subjects and games")}</p>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="flex flex-col items-center text-center">
                      <Badge
                        variant={
                          studentData.progress_status?.toLowerCase() === "advanced" ||
                          studentData.progress_status?.toLowerCase() === "excellent"
                            ? "default"
                            : studentData.progress_status?.toLowerCase() === "on track"
                              ? "outline"
                              : "destructive"
                        }
                        className={`text-xl font-bold mb-4 px-4 py-1 ${
                          studentData.progress_status?.toLowerCase() === "advanced" ||
                          studentData.progress_status?.toLowerCase() === "excellent"
                            ? "bg-green-100 text-green-800 border-green-200"
                            : studentData.progress_status?.toLowerCase() === "on track"
                              ? "bg-blue-100 text-blue-800 border-blue-200"
                              : "bg-red-100 text-red-800 border-red-200"
                        }`}
                      >
                        {t(studentData.progress_status || "Unknown")}
                      </Badge>
                      <h3 className="mt-4 text-lg font-medium">{t("Progress Status")}</h3>
                      <p className="text-sm text-muted-foreground">{t("Overall learning trajectory")}</p>
                      <div className="w-full mt-4">
                        <div className="flex justify-between text-xs mb-1 text-muted-foreground">
                          <span>{t("Needs Support")}</span>
                          <span>{t("On Track")}</span>
                          <span>{t("Advanced")}</span>
                        </div>
                        <Progress
                          value={
                            studentData.progress_status?.toLowerCase() === "advanced" ||
                            studentData.progress_status?.toLowerCase() === "excellent"
                              ? 100
                              : studentData.progress_status?.toLowerCase() === "on track"
                                ? 66
                                : 33
                          }
                          className="h-2"
                        />
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardContent className="pt-6">
                    <div className="flex flex-col items-center text-center">
                      <div className="text-3xl font-bold">{studentData.games_played || 0}</div>
                      <h3 className="mt-4 text-lg font-medium">{t("Games Completed")}</h3>
                      <p className="text-sm text-muted-foreground">{t("Total educational games played")}</p>
                      <div className="w-full mt-4 flex items-center gap-2">
                        <GameController2 className="h-4 w-4 text-muted-foreground" />
                        <Progress value={Math.min(100, ((studentData.games_played || 0) / 50) * 100)} className="h-2" />
                        <span className="text-xs text-muted-foreground">/50 {t("Target")}</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>

              {studentData.monthlyProgress && studentData.monthlyProgress.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-4">{t("Performance Over Time")}</h3>
                  <div className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <RechartsLineChart data={studentData.monthlyProgress}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="month" />
                        <YAxis domain={[0, 100]} />
                        <Tooltip />
                        <Legend />
                        <Line type="monotone" dataKey="Math" stroke="#8884d8" activeDot={{ r: 8 }} name={t("Math")} />
                        <Line type="monotone" dataKey="English" stroke="#82ca9d" name={t("English")} />
                        <Line type="monotone" dataKey="Science" stroke="#ffc658" name={t("Science")} />
                        <Line type="monotone" dataKey="History" stroke="#ff8042" name={t("History")} />
                      </RechartsLineChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}

              {subjectScores.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-4">{t("Subject Performance")}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {subjectScores.map((subjectScore) => (
                      <div key={subjectScore.id} className="space-y-2">
                        <div className="flex justify-between">
                          <h4 className="font-medium">{t(subjectScore.subject)}</h4>
                          <div className="flex items-center gap-2">
                            <span className="text-sm text-muted-foreground">
                              {t("Class Avg")}: {getClassAverage(subjectScore.subject)}%
                            </span>
                            <span className="font-medium">{subjectScore.score}%</span>
                          </div>
                        </div>
                        <Progress
                          value={Number(subjectScore.score)}
                          className="h-2"
                          indicatorClassName={
                            Number(subjectScore.score) >= 90
                              ? "bg-green-500"
                              : Number(subjectScore.score) >= 80
                                ? "bg-blue-500"
                                : Number(subjectScore.score) >= 70
                                  ? "bg-yellow-500"
                                  : "bg-red-500"
                          }
                        />
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="subjects" className="space-y-6 mt-4">
          <Card>
            <CardHeader>
              <CardTitle>{t("Subject Performance")}</CardTitle>
              <CardDescription>{t("Detailed breakdown by academic subject")}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {subjectScores.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-4">{t("Subject Comparison")}</h3>
                  <div className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={subjectScores.map((subjectScore) => ({
                          subject: t(subjectScore.subject),
                          "Student Score": subjectScore.score,
                          "Class Average": getClassAverage(subjectScore.subject),
                        }))}
                        margin={{ top: 5, right: 20, left: 0, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="subject" />
                        <YAxis domain={[0, 100]} />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="Student Score" fill="#8884d8" name={t("Student Score")} />
                        <Bar dataKey="Class Average" fill="#82ca9d" name={t("Class Average")} />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}

              {subjectScores.length > 0 && (
                <div className="space-y-6">
                  {subjectScores.map((subjectScore) => (
                    <Card key={subjectScore.id}>
                      <CardHeader>
                        <CardTitle className="text-lg">{t(subjectScore.subject)}</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-4">
                        <div className="flex justify-between items-center">
                          <div className="space-y-1">
                            <div className="text-sm font-medium">{t("Student Score")}</div>
                            <div className="text-2xl font-bold">{subjectScore.score}%</div>
                          </div>
                          <div className="space-y-1 text-right">
                            <div className="text-sm font-medium">{t("Class Average")}</div>
                            <div className="text-2xl font-bold">{getClassAverage(subjectScore.subject)}%</div>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="skills" className="space-y-6 mt-4">
          <Card>
            <CardHeader>
              <CardTitle>{t("Skills Assessment")}</CardTitle>
              <CardDescription>{t("Evaluation of key learning and cognitive skills")}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {id && <StudentSkillsRadar studentId={Number(id)} />}
              <div className="pt-4">
                <h3 className="text-lg font-medium mb-2">{t("Detailed Skill Analysis")}</h3>
                <p className="text-sm text-muted-foreground mb-4">{t("skillAnalysisDescription")}</p>
                {skills.length > 0 ? (
                  <div className="space-y-4">
                    {skills.map((skillItem) => {
                      const { level, comment, icon, displaySkillName } = getSkillDisplayAndComment(
                        skillItem.skill,
                        skillItem.score,
                      )
                      return (
                        <div key={skillItem.id} className="flex items-start gap-3">
                          <div className="flex-shrink-0 mt-1">{icon}</div>
                          <div>
                            <h4 className="font-medium">
                              {displaySkillName}:{" "}
                              <span className="text-sm font-normal">
                                ({level}, {skillItem.score}%)
                              </span>
                            </h4>
                            <p className="text-sm text-muted-foreground">{comment}</p>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                ) : (
                  <p className="text-sm text-muted-foreground italic">{t("noSkillsDataAvailableDetailed")}</p>
                )}
              </div>
              {skills.length > 0 && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                  <Card className="border-green-200">
                    <CardHeader className="pb-2 bg-green-50 rounded-t-lg">
                      <CardTitle className="text-lg flex items-center gap-2 text-green-800">
                        <Star className="h-5 w-5 text-green-600" />
                        {t("Top Strengths")}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-4">
                      <ul className="space-y-2">
                        {topStrengths.map((skill, index) => {
                          const { displaySkillName } = getSkillDisplayAndComment(skill.skill, skill.score)
                          return (
                            <li key={index} className="flex items-start gap-2 text-sm">
                              <ChevronUp className="h-4 w-4 text-green-500 flex-shrink-0 mt-0.5" />
                              <span>
                                {displaySkillName} ({skill.score}%)
                              </span>
                            </li>
                          )
                        })}
                      </ul>
                    </CardContent>
                  </Card>
                  <Card className="border-orange-200">
                    <CardHeader className="pb-2 bg-orange-50 rounded-t-lg">
                      <CardTitle className="text-lg flex items-center gap-2 text-orange-800">
                        <LineChartIcon className="h-5 w-5 text-orange-600" />
                        {t("Areas for Development")}
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="pt-4">
                      <ul className="space-y-2">
                        {areasForDevelopment.map((skill, index) => {
                          const { displaySkillName } = getSkillDisplayAndComment(skill.skill, skill.score)
                          return (
                            <li key={index} className="flex items-start gap-2 text-sm">
                              <MinusCircle className="h-4 w-4 text-red-500 flex-shrink-0 mt-0.5" />
                              <span>
                                {displaySkillName} ({skill.score}%)
                              </span>
                            </li>
                          )
                        })}
                      </ul>
                    </CardContent>
                  </Card>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="games" className="space-y-6 mt-4">
          <Card>
            <CardHeader>
              <CardTitle>{t("Game Performance")}</CardTitle>
              <CardDescription>{t("Analysis of educational game engagement and results")}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              {gamePlays.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-4">{t("Game Performance Comparison")}</h3>
                  <div className="h-[300px]">
                    <ResponsiveContainer width="100%" height="100%">
                      <BarChart
                        data={gamePlays.map((gamePlay) => ({
                          name: t(gameDetails[gamePlay.game_id]?.game_name || "Unknown Game"),
                          score: gamePlay.score,
                        }))}
                        margin={{ top: 5, right: 20, left: 0, bottom: 5 }}
                      >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis domain={[0, 100]} unit="%" />
                        <Tooltip formatter={(value: number) => `${value}%`} />
                        <Legend />
                        <Bar dataKey="score" fill="#8884d8" name={t("Score")} />
                      </BarChart>
                    </ResponsiveContainer>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="recommendations" className="space-y-6 mt-4">
          {studentDataForReport && <AiReportSummary studentData={studentDataForReport} language={language} />}
          <Card>
            <CardHeader>
              <CardTitle>{t("Personalized Learning Plan")}</CardTitle>
              <CardDescription>{t("Tailored recommendations based on performance analysis")}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="border-green-200">
                  <CardHeader className="pb-2 bg-green-50 rounded-t-lg">
                    <CardTitle className="text-lg flex items-center gap-2 text-green-800">
                      <Star className="h-5 w-5 text-green-600" />
                      {t("Strengths")}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-4">
                    {strengthNames.length > 0 ? (
                      <ul className="space-y-2">
                        {strengthNames.map((strength, index) => (
                          <li key={index} className="flex items-start gap-2 text-sm">
                            <ChevronUp className="h-4 w-4 text-green-500 flex-shrink-0 mt-0.5" />
                            <span>{t(strength)}</span>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-sm text-muted-foreground italic">{t("No specific strengths listed.")}</p>
                    )}
                  </CardContent>
                </Card>

                <Card className="border-orange-200">
                  <CardHeader className="pb-2 bg-orange-50 rounded-t-lg">
                    <CardTitle className="text-lg flex items-center gap-2 text-orange-800">
                      <LineChartIcon className="h-5 w-5 text-orange-600" />
                      {t("Areas for Improvement")}
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-4">
                    {developmentAreaNames.length > 0 ? (
                      <ul className="space-y-2">
                        {developmentAreaNames.map((area, index) => (
                          <li key={index} className="flex items-start gap-2 text-sm">
                            <LineChartIcon className="h-4 w-4 text-orange-500 flex-shrink-0 mt-0.5" />
                            <span>{t(area)}</span>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <p className="text-sm text-muted-foreground italic">
                        {t("No specific areas for improvement listed.")}
                      </p>
                    )}
                  </CardContent>
                </Card>
              </div>

              {studentData.recommendedGames && studentData.recommendedGames.length > 0 && (
                <div>
                  <h3 className="text-lg font-medium mb-4">{t("Recommended Games")}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {studentData.recommendedGames.map((game, index) => (
                      <Card key={`${game.name}-${index}`}>
                        <CardHeader className="pb-2">
                          <CardTitle className="text-lg">{t(game.name)}</CardTitle>
                          <CardDescription>
                            {t("Level")}: {t(game.level)}
                          </CardDescription>
                        </CardHeader>
                        <CardContent>
                          <p className="text-sm text-muted-foreground">{t(game.description)}</p>
                        </CardContent>
                        <CardFooter>
                          <Button
                            variant="outline"
                            size="sm"
                            className="w-full bg-transparent"
                            onClick={() =>
                              toast({
                                title: t("Assigning Game"),
                                description: t(`Assigning ${t(game.name)} to ${studentData.name}`),
                              })
                            }
                          >
                            <GameController2 className="mr-2 h-4 w-4" />
                            {t("Assign Game")}
                          </Button>
                        </CardFooter>
                      </Card>
                    ))}
                  </div>
                </div>
              )}

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">{t("Suggested Action Plan")}</CardTitle>
                  <CardDescription>{t("Next steps for continued improvement")}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  {actionPlans.length > 0 ? (
                    <>
                      {["short_term", "medium_term", "long_term"].map((term) => {
                        const termMap: { [key: string]: string } = {
                          short_term: t("Short-term Goals (1-2 weeks)"),
                          medium_term: t("Medium-term Goals (1-2 months)"),
                          long_term: t("Long-term Goals (3-6 months)"),
                        }

                        const goals = actionPlans.filter((g) => g.type === term)
                        return goals.length > 0 ? (
                          <div key={term} className="space-y-2">
                            <h4 className="text-sm font-medium">{termMap[term]}</h4>
                            <ul className="list-disc pl-5 space-y-1 text-sm text-muted-foreground">
                              {goals.map((goal, index) => (
                                <li key={`${term}-${index}`}>
                                  {t(goal.goal)}
                                  <Badge
                                    variant={goal.status === "pending" ? "destructive" : "default"}
                                    className="ml-2"
                                  >
                                    {t(goal.status || "Unknown Status")}
                                  </Badge>
                                </li>
                              ))}
                            </ul>
                          </div>
                        ) : null
                      })}
                    </>
                  ) : (
                    <p className="text-sm text-muted-foreground italic">{t("No specific action plan available.")}</p>
                  )}
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">{t("Teacher Notes")}</CardTitle>
                  <CardDescription>{t("Additional observations and recommendations")}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="p-4 border border-dashed rounded-lg bg-gray-50">
                    {studentData.personalizedLearningPlan?.teacherNotes ? (
                      <p className="text-sm italic text-gray-700">
                        {t(studentData.personalizedLearningPlan.teacherNotes)}
                      </p>
                    ) : (
                      <p className="text-sm italic text-muted-foreground">{t("No teacher notes provided.")}</p>
                    )}
                  </div>
                </CardContent>
              </Card>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}